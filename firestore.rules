rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read, update, delete: if isOwner(userId) || isAdmin();
      allow create: if request.auth.uid != null;
    }

    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
      
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth.uid != null;
        allow update, delete: if isOwner(request.resource.data.userId) || isAdmin();
      }
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    match /promoCodes/{code} {
      allow read: if request.auth.uid != null;
      allow create, update, delete: if isAdmin();
    }
    
    match /settings/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /orders/{orderId} {
      // Any authenticated user can create an order if they are the owner.
      allow create: if request.auth.uid != null && isOwner(request.resource.data.userId);
      // Only the owner or an admin can read or update an order.
      allow read, update: if isOwner(resource.data.userId) || isAdmin();
      // Allow a user to list their own orders.
      allow list: if (request.query.limit <= 100 && isOwner(request.query.userId)) || isAdmin();
    }
  }
}